#local indent = 8
#local function macro_unpack_keys(t)
#   local ret = ""
#   for k, v in pairs(t) do
#       _put((" "):rep(indent) .. k .. " = ")
#       if type(v) == "table" then
#           _put("{\n")
#           indent = indent + 4
#           macro_unpack_keys(v)
#           indent = indent - 4
#           _put((" "):rep(indent) .. "},\n")
#       elseif type(v) == "number" then
#           _put(("%s,\n"):format(tostring(v)))
#       else
#           _put(("%q,\n"):format(v))
#       end
#   end
#end
#
#local function macro_unpack_keyconf()
#   local indent = 12
#   local ret = ""
#   for ctx, ctx_dat in pairs(config.input_commands) do
#       _put((" "):rep(indent) .. ctx .. " = {\n")
#       indent = indent + 4
#       if ctx_dat.__multi and ctx_dat.__multi > 1 then
#           for _ = 1, ctx_dat.__multi do
#               _put((" "):rep(indent) .. "{\n")
#               indent = indent + 4
#               for inp, inp_dat in pairs(ctx_dat) do if inp ~= "__multi" then
#                   if inp_dat.type == "directional" or inp_dat.type == "analog" then
#                       _put((" "):rep(indent) .. inp .. " = {\n")
#                       indent = indent + 4
#                       if inp_dat.keyboard then
#                           _put((" "):rep(indent) .. "keyboard = {\n")
#                           indent = indent + 4
#                           _put((" "):rep(indent) .. ("up = %q,\n"):format(inp_dat.keyboard.up))
#                           _put((" "):rep(indent) .. ("down = %q,\n"):format(inp_dat.keyboard.down))
#                           _put((" "):rep(indent) .. ("left = %q,\n"):format(inp_dat.keyboard.left))
#                           _put((" "):rep(indent) .. ("right = %q,\n"):format(inp_dat.keyboard.right))
#                           indent = indent - 4
#                           _put((" "):rep(indent) .. "},\n")
#                       end
#                       if inp_dat.gamepad then
#                           _put((" "):rep(indent) .. "gamepad = {\n")
#                           indent = indent + 4
#                           _put((" "):rep(indent) .. ("up = %q,\n"):format(inp_dat.gamepad.up))
#                           _put((" "):rep(indent) .. ("down = %q,\n"):format(inp_dat.gamepad.down))
#                           _put((" "):rep(indent) .. ("left = %q,\n"):format(inp_dat.gamepad.left))
#                           _put((" "):rep(indent) .. ("right = %q,\n"):format(inp_dat.gamepad.right))
#                           indent = indent - 4
#                           _put((" "):rep(indent) .. "},\n")
#                       end
#                       if inp_dat.joystick then
#                       _put((" "):rep(indent) .. ("joystick = %q\n"):format(inp_dat.joystick))
#                       end
#                       indent = indent - 4
#                       _put((" "):rep(indent) .. "},\n")
#                   elseif inp_dat.type == "button" then
#                       _put((" "):rep(indent) .. inp .. " = {\n")
#                       indent = indent + 4
#                       if inp_dat.keyboard then
#                           _put((" "):rep(indent) .. ("keyboard = %q,\n"):format(inp_dat.keyboard))
#                       end
#                       if inp_dat.gamepad then
#                           _put((" "):rep(indent) .. ("gamepad = %q,\n"):format(inp_dat.gamepad))
#                       end
#                       indent = indent - 4
#                       _put((" "):rep(indent) .. "},\n")
#                   end
#               end end
#               indent = indent - 4
#               _put((" "):rep(indent) .. "},\n")
#           end
#           else
#           for inp, inp_dat in pairs(ctx_dat) do if inp ~= "__multi" then
#               if inp_dat.type == "directional" or inp_dat.type == "analog" then
#                   _put((" "):rep(indent) .. inp .. " = {\n")
#                   indent = indent + 4
#                   if inp_dat.keyboard then
#                       _put((" "):rep(indent) .. "keyboard = {\n")
#                       indent = indent + 4
#                       _put((" "):rep(indent) .. ("up = %q,\n"):format(inp_dat.keyboard.up))
#                       _put((" "):rep(indent) .. ("down = %q,\n"):format(inp_dat.keyboard.down))
#                       _put((" "):rep(indent) .. ("left = %q,\n"):format(inp_dat.keyboard.left))
#                       _put((" "):rep(indent) .. ("right = %q,\n"):format(inp_dat.keyboard.right))
#                       indent = indent - 4
#                       _put((" "):rep(indent) .. "},\n")
#                   end
#                   if inp_dat.gamepad then
#                       _put((" "):rep(indent) .. "gamepad = {\n")
#                       indent = indent + 4
#                       _put((" "):rep(indent) .. ("up = %q,\n"):format(inp_dat.gamepad.up))
#                       _put((" "):rep(indent) .. ("down = %q,\n"):format(inp_dat.gamepad.down))
#                       _put((" "):rep(indent) .. ("left = %q,\n"):format(inp_dat.gamepad.left))
#                       _put((" "):rep(indent) .. ("right = %q,\n"):format(inp_dat.gamepad.right))
#                       indent = indent - 4
#                       _put((" "):rep(indent) .. "},\n")
#                   end
#                   if inp_dat.joystick then
#                       _put((" "):rep(indent) .. ("joystick = %q\n"):format(inp_dat.joystick))
#                   end
#                   indent = indent - 4
#                   _put((" "):rep(indent) .. "},\n")
#               elseif inp_dat.type == "button" then
#                   _put((" "):rep(indent) .. inp .. " = {\n")
#                   indent = indent + 4
#                   if inp_dat.keyboard then
#                       _put((" "):rep(indent) .. ("keyboard = %q,\n"):format(inp_dat.keyboard))
#                   end
#                   if inp_dat.gamepad then
#                       _put((" "):rep(indent) .. ("gamepad = %q,\n"):format(inp_dat.gamepad))
#                   end
#                   indent = indent - 4
#                   _put((" "):rep(indent) .. "},\n")
#               end
#           end end
#       end
#       indent = indent - 4
#       _put((" "):rep(indent) .. "},\n")
#   end
#end


--- Reads and stores variables in `config.json`.
---@class vlib.Core.Config: vlib.Core.JsonTable
---@field [string] any
local Config = {}

local JsonTable = require(".JsonTable")

--- Saves the current configuration.
---@return boolean
function Config.Save()
    return JsonTable.ToFile(Config, "config.json")
end

--- Loading the config file

-- The config loading requires behavior that is a little
-- more robust than what is found in JsonTable.

local config_table = {}
do
    local config_file = io.open("config.json", "r")
    if config_file then
        config_table = cjson.decode(config_file:read("*a"))
        config_file:close()
    end

    local function merge(t1, t2)
        for k, v in pairs(t2) do
            -- Only overwrite if types differ
            if type(t1[k]) ~= type(t2[k]) then
                if type(v) == "table" then
                    t1[k] = {}
                    t1[k] = merge(t1[k], t2[k])
                else
                    t1[k] = v
                end
            end
        end
        return t1
    end

    config_table = merge(config_table, {
#macro_unpack_keys(config.default_config)
        controls = {
#macro_unpack_keyconf()
        },
    })
end

Config = JsonTable.New(config_table, Config) --[[@as vlib.Core.Config]]

return Config
