
--- Miscellaneous debug functionality for VeritaLib.  
--- If you build VeritaLib with debug disabled, you may safely remove this file.
local Debug = {}

#if config.debug.enable then

local Input = require(".Core.Input")
local imgui = require("imgui")

local function ShowTestInputMapWindow()
    if imgui.ImGui.Begin("VeritaLib Inputs") then
        for ctx, ctx_dat in pairs(Input.schema) do
            Input.UpdateContext(ctx)
            if imgui.ImGui.CollapsingHeader(ctx) then
                for inp, inp_dat in pairs(Input.state[ctx]) do
                    if ctx_dat[inp] == "button" then
                        imgui.ImGui.Text(("%s: %s"):format(inp, inp_dat))
                    else
                        for inp2, inp_dat2 in pairs(inp_dat) do
                            imgui.ImGui.Text(("%s.%s: %s"):format(inp, inp2, inp_dat2))
                        end
                    end
                end
            end
        end
    end
    imgui.ImGui.End()
end

Debug.show_ui = false

function Debug.Update()
    Debug.Input.Update()
    if Debug.Input.IsPressed("show_ui") then
        Debug.show_ui = not Debug.show_ui
    end
    if Debug.show_ui then
        imgui.backend.ShowFrameStatistics()
        imgui.backend.ShowResourceManagerDebugWindow()
        imgui.backend.ShowTestInputWindow()
        ShowTestInputMapWindow()
    end
end

Debug.Input = {
    keys = {
#for inp, key in pairs(config.debug.input_commands) do
#--= inp = show_ui key = F12
        $(inp) = "$(key)",
#end
    },
    prevState = {
#for inp, _ in pairs(config.debug.input_commands) do
#--= inp = show_ui
        $(inp) = false,
#end
    },
    state = {
#for inp, _ in pairs(config.debug.input_commands) do
#--= inp = show_ui
        $(inp) = false,
#end
    },
}

local Lkey = lstg.Input.Keyboard

function Debug.Input.Update()
    for inp, key in pairs(Debug.Input.keys) do
        Debug.Input.prevState[inp] = Debug.Input.state[inp]
        Debug.Input.state[inp] = Lkey.GetKeyState(Lkey[key])
    end
end

function Debug.Input.IsPressed(inp)
    return Debug.Input.state[inp] and not Debug.Input.prevState[inp]
end

function Debug.Input.IsReleased(inp)
    return Debug.Input.prevState[inp] and not Debug.Input.state[inp]
end

#end

return Debug
